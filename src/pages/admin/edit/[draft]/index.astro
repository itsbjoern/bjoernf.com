---
import ControlPoint from "@/images/icons/ControlPoint.svg?raw";
import Loyalty from "@/images/icons/Loyalty.svg?raw";
import Subtitles from "@/images/icons/Subtitles.svg?raw";
import { getDb } from "@/utils/database";
import { ObjectId } from "mongodb";
import Layout from "@/layouts/Layout.astro";

import { ensureAuth } from "@/utils/auth";
import TextField from "@/components/TextField.astro";
import Editor from "@/components/Editor.astro";
import Button from "@/components/Button.astro";
import Tag from "@/components/Tag.astro";
import { Image } from "astro:assets";

try {
  await ensureAuth(Astro.cookies.get("token")?.value);
} catch {
  return Astro.redirect("/admin/login");
}

const { draft: postId } = Astro.params;

const database = await getDb();
const post = await database.posts().findOne({ _id: new ObjectId(postId) });

if (!post) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const data = post.draft ?? post.published; // backwards compat
---

<Layout title="">
  <Button id="back" variant="text" to="/admin/edit">{"< Back"}</Button>
  <div id="edit-wrapper" data-post={post._id}>
    <div class="flex flex-row gap-2">
      <div class="image-container">
        <div class="loading-text">Loading</div>
        <input type="file" id="image-input" hidden />
        {
          data?.image ? (
            <Image
              width={120}
              height={120}
              src={data?.image}
              alt=""
              class="image-button"
            />
          ) : (
            <div class="image-placeholder image-button" />
          )
        }
      </div>
      <div class="flex flex-1 flex-col justify-center gap-4">
        <div class="tag-chooser">
          <TextField
            id="tag-input"
            label="Tag"
            suggestions={data?.tags}
            icon={Loyalty}
          />
          <div class="add-button">
            <Button id="add-tag" icon={ControlPoint} variant="text" />
          </div>
          {
            data?.tags?.map((tag) => (
              <Tag class="post-tag" deletable name={tag} />
            ))
          }
        </div>
        <TextField
          id="title-input"
          label="Title"
          value={data?.title}
          icon={Subtitles}
        />
      </div>
    </div>
    <Editor postId={post._id.toString()} html={data?.html!} />
    <div class="flex justify-between gap-4">
      <div class="flex gap-4">
        <Button
          id="contained"
          variant="contained"
          to={`/admin/edit/${postId}/preview`}
        >
          Preview
        </Button>
        {
          !post.published ? (
            <>
              <Button id="delete" variant="text">
                Delete
              </Button>
            </>
          ) : null
        }
      </div>
      <div class="flex gap-4">
        {
          post.published ? (
            <>
              <Button id="unpublish" variant="text">
                Unpublish
              </Button>
            </>
          ) : null
        }
        <Button id="publish" variant="contained">
          {post.published ? "Save" : "Publish"}
        </Button>
      </div>
    </div>
  </div>
</Layout>

<style>
  #edit-wrapper {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 25px;
    width: 100%;
    margin-top: 25px;
  }

  .image-placeholder {
    width: 120px;
    height: 120px;
    background-color: gray;
    cursor: pointer;
  }

  .image-container {
    position: relative;

    .loading-text {
      font-size: 1.5em;
      position: absolute;
      top: 40px;
      right: 0;
      bottom: 0;
      left: 20px;
    }
  }

  .image-container:not(.loading) {
    .loading-text {
      display: none;
    }
  }

  .image-container.loading {
    .image-button {
      opacity: 0.5;
    }
  }

  .image-button {
    object-fit: cover;
    width: 120px;
    height: 120px;

    &:hover {
      opacity: 0.5;
    }
  }

  .tag-chooser {
    display: flex;
    align-items: center;

    .add-button {
      color: gray;
      font-size: 1.2em;

      :hover {
        color: var(--tw-color-primary);
      }
    }
  }
</style>

<script>
  import type { UploadFormData } from "@/pages/api/[post]/upload";
  import { POST } from "@/utils/api";
  import { debounce } from "@/utils/debounce";

  const postId = document.getElementById("edit-wrapper")!.dataset.post;

  const titleElement = document.getElementById(
    "title-input",
  ) as HTMLInputElement;
  titleElement.addEventListener(
    "input",
    debounce(async (e) => {
      const title = titleElement.value;
      await POST(`/api/${postId}/update`, {
        title,
      });
    }, 400),
  );

  const getTagValues = () => {
    const tags = document.querySelectorAll<HTMLDivElement>(
      ".tag-chooser .deletable",
    );
    const tagValues: string[] = [];
    tags.forEach((tag) => {
      tagValues.push(tag.innerText);
    });
    return tagValues;
  };

  const tagInput = document.getElementById("tag-input") as HTMLInputElement;
  const tagButton = document.getElementById("add-tag") as HTMLInputElement;
  tagButton.addEventListener("click", async (e) => {
    const tag = tagInput.value;
    const tagValues = getTagValues();
    await POST(`/api/${postId}/update`, {
      tags: [...tagValues, tag],
    });
    window.location.reload();
  });

  const allTags = document.querySelectorAll<HTMLDivElement>(
    ".tag-chooser .deletable",
  );
  allTags.forEach((tag) => {
    tag.addEventListener("click", async (e) => {
      const tagValues = getTagValues();

      await POST(`/api/${postId}/update`, {
        tags: tagValues.filter((t) => t !== tag.innerText),
      });
      tag.parentElement?.removeChild(tag);
    });
  });

  const publishButton = document.getElementById("publish");
  publishButton?.addEventListener("click", async (e) => {
    const check = confirm("Are you sure you want to publish this post?");
    if (!check) {
      return;
    }
    const result = await POST(`/api/${postId}/publish`, null);
    if (result.success) {
      window.location.reload();
    }
  });

  const unpublishButton = document.getElementById("unpublish");
  unpublishButton?.addEventListener("click", async (e) => {
    const check = confirm("Are you sure you want to unpublish this post?");
    if (!check) {
      return;
    }
    const result = await POST(`/api/${postId}/unpublish`, null);
    if (result.success) {
      window.location.reload();
    }
  });

  const deleteButton = document.getElementById("delete");
  deleteButton?.addEventListener("click", async (e) => {
    const check = confirm("Are you sure you want to delete this post?");
    if (!check) {
      return;
    }
    const result = await POST(`/api/${postId}/delete`, null);
    if (result.success) {
      window.location.href = "/admin/edit";
    }
  });

  const imageButton = document.querySelector(".image-button");
  const imageUploadElement = document.getElementById(
    "image-input",
  ) as HTMLInputElement;
  imageButton?.addEventListener("click", async (e) => {
    imageUploadElement.click();
  });
  imageUploadElement.addEventListener("change", async (e) => {
    const file = imageUploadElement.files?.[0];
    if (!file) {
      return;
    }
    imageUploadElement.parentElement?.classList.add("loading");
    const formData = new FormData() as UploadFormData;
    formData.append("image", file);
    const result = await POST(`/api/${postId}/upload`, formData);
    imageUploadElement.parentElement?.classList.remove("loading");
    if (!result.success) {
      return;
    }

    const imageResult = await POST(`/api/${postId}/update`, {
      image: result.json.url,
    });

    if (imageResult.success) {
      window.location.reload();
    }
  });
</script>
