---
import { getDb } from "@/utils/database";
import { ObjectId } from "mongodb";
import Layout from "@/layouts/Layout.astro";
import ShareIcon from "@/components/ShareIcon.astro";

import EmailIcon from "@/images/icons/share/EmailIcon.svg?raw";
import LinkedinIcon from "@/images/icons/share/LinkedinIcon.svg?raw";
import XComIcon from "@/images/icons/share/XComIcon.svg?raw";
import WhatsappIcon from "@/images/icons/share/WhatsappIcon.svg?raw";

import { emailLink, linkedinLink, whatsappLink, xComLink } from "@/utils/share";
import { formatDate } from "@/utils/formatDate";

import { ensureAuth } from "@/utils/auth";
import Button from "@/components/Button.astro";
import PostView from "@/components/PostView.astro";

// export const prerender = true;
// export async function getStaticPaths() {
//   const db = await getDb();
//   const posts = await db.posts().find({}).sort({ createdAt: -1 }).toArray();
//   return {
//     paths: posts.map((p) => ({ params: { post: p._id.toString() } })),
//   };
// }

let user = null;
try {
  user = await ensureAuth(Astro.cookies.get("token")?.value);
} catch {}

const { post: postId } = Astro.params;

let query = null;
try {
  // If not object id, then it's a slug
  query = { _id: new ObjectId(postId) };
} catch {
  query = { "published.slug": postId };
}

const database = await getDb();
const post = await database.posts().findOne(query);

if (!post || !post?.published) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const { image, title, html, tags, summary, publishedAt } = post.published;
const url = Astro.url.toString();
---

<Layout
  title={`"${title}"`}
  description={summary}
  image={image}
  subtitle={`Published ${formatDate(publishedAt!)}`}
>
  <div class="flex h-auto flex-col">
    <div
      class={`lg:sticky lg:top-4 lg:h-0 lg:w-52 lg:gap-12 lg:translate-x-64 lg:self-end mb-2`}
    >
      <div class="flex flex-col justify-center lgo:flex-row text-white">
        <ShareIcon
          size={45}
          icon={EmailIcon}
          href={emailLink({ title, url, tags })}
        />
        <ShareIcon
          size={45}
          icon={LinkedinIcon}
          href={linkedinLink({ title, url, tags })}
        />
        <ShareIcon
          size={45}
          icon={WhatsappIcon}
          href={whatsappLink({ title, url, tags }, true)}
        />
        <ShareIcon
          size={45}
          icon={XComIcon}
          href={xComLink({ title, url, tags })}
        />
      </div>
    </div>
  </div>
  <PostView post={post.published} />
  {
    user ? (
      <div class="flex flex-1 justify-end">
        <Button id="edit" variant="contained" to={`/admin/edit/${post._id}`}>
          Edit
        </Button>
      </div>
    ) : null
  }
</Layout>
