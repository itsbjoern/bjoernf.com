---
import Undo from "@/images/icons/Undo.svg?raw";
import Redo from "@/images/icons/Redo.svg?raw";
import FormatBold from "@/images/icons/FormatBold.svg?raw";
import FormatItalic from "@/images/icons/FormatItalic.svg?raw";
import FormatUnderlined from "@/images/icons/FormatUnderlined.svg?raw";
import FormatStrike from "@/images/icons/FormatStrike.svg?raw";
import FormatListBulleted from "@/images/icons/FormatListBulleted.svg?raw";
import FormatListNumbered from "@/images/icons/FormatListNumbered.svg?raw";
import FormatAlignLeft from "@/images/icons/FormatAlignLeft.svg?raw";
import FormatAlignCenter from "@/images/icons/FormatAlignCenter.svg?raw";
import FormatAlignRight from "@/images/icons/FormatAlignRight.svg?raw";
import Blockquote from "@/images/icons/Blockquote.svg?raw";
import Divider from "@/images/icons/Divider.svg?raw";

import Icon from "@/components/Icon.astro";
import type { Extensions } from "@/pages/blog/types";

import "@/content.css";
import "@/highlight.css";

interface Props {
  postId: string;
  html: string;
}

const { postId, html } = Astro.props;

// @ts-expect-error
const menuIcons: Record<Extensions, string> = {
  undo: Undo,
  redo: Redo,
  bold: FormatBold,
  italic: FormatItalic,
  underline: FormatUnderlined,
  strike: FormatStrike,
  bulletList: FormatListBulleted,
  orderedList: FormatListNumbered,
  alignLeft: FormatAlignLeft,
  alignCenter: FormatAlignCenter,
  alignRight: FormatAlignRight,
  blockquote: Blockquote,
  horizontalRule: Divider,
};

const menuButtons = (Object.keys(menuIcons) as Array<Extensions>).map(
  (key) => ({
    class: key,
    icon: menuIcons[key],
  }),
);
---

<div id="blog-editor">
  <div id="menu">
    {
      menuButtons.map((buttonData) => {
        return (
          <button class={buttonData.class}>
            <Icon icon={buttonData.icon} />
          </button>
        );
      })
    }
  </div>
  <div id="text-editor" data-post={postId} data-html={html}></div>

  <script>
    import { Editor } from "@tiptap/core";
    import StarterKit from "@tiptap/starter-kit";
    import UnderlineExtension from "@tiptap/extension-underline";
    import TextAlignExtension from "@tiptap/extension-text-align";
    import ImageExtension from "@tiptap/extension-image";
    import LinkExtension from "@tiptap/extension-link";
    import { CodeBlockLowlight } from "@tiptap/extension-code-block-lowlight";
    import ImageResize from "tiptap-extension-resize-image";
    import { common, createLowlight } from "lowlight";

    import type { Extensions } from "@/pages/blog/types";
    import { POST } from "@/utils/api";
    import { debounce } from "@/utils/debounce";
    import type { UploadFormData } from "@/pages/api/[post]/upload";

    const editorElement = document.getElementById("text-editor")!;
    const postId = editorElement.dataset.post!;

    const lowlight = createLowlight(common);

    const editorClass = new Editor({
      element: editorElement,
      extensions: [
        StarterKit,
        ImageResize,
        UnderlineExtension,
        TextAlignExtension.configure({
          types: ["heading", "paragraph"],
        }),
        ImageExtension.configure({
          inline: false,
        }),
        LinkExtension.configure({
          protocols: ["http", "https", "mailto"],
        }),
        CodeBlockLowlight.configure({
          lowlight,
        }),
      ],
      content: editorElement.dataset.html,
    });

    const uploadFiles = async (files: FileList) => {
      // check if files are images
      const images = Array.from(files).filter((file) =>
        file.type.startsWith("image/"),
      );
      if (images.length === 0) {
        return;
      }

      const uploadPromises = images.map(async (image) => {
        const formData = new FormData() as UploadFormData;
        formData.append("image", image);
        const response = await POST(`/api/${postId}/upload`, formData);

        if (!response.success) {
          return null;
        }

        return response.json.url;
      });

      const sources = await Promise.all(uploadPromises);
      sources.forEach((source) => {
        if (source) {
          editorClass.chain().focus().setImage({ src: source }).run();
        }
      });
    };

    editorElement.addEventListener("drop", async (e) => {
      const files = e?.dataTransfer?.files;
      if (files) {
        e.preventDefault();
        e.stopPropagation();
        const sources = await uploadFiles(files);
      }
    });

    editorElement.addEventListener("paste", async (e) => {
      const files = e?.clipboardData?.files;
      if (files) {
        e.preventDefault();
        e.stopPropagation();
        const sources = await uploadFiles(files);
      }
    });

    editorClass.on(
      "update",
      debounce(async ({ editor }) => {
        const html = editor.getHTML();
        const text = editor.getText();

        await POST(`/api/${postId}/update`, {
          html,
          text,
        });
      }, 400),
    );

    const getActiveParam = (command: string) => {
      if (command.startsWith("align")) {
        return { textAlign: command.replace("align", "").toLowerCase() };
      }
      return command;
    };

    const menuItems = document.querySelectorAll("#menu button");
    const updateActiveClasses = (currentEditor: typeof editorClass) => {
      menuItems.forEach((elem) => {
        const ext = elem.classList[0] as Extensions;

        if (currentEditor.isActive(getActiveParam(ext))) {
          elem.classList.add("active");
        } else {
          elem.classList.remove("active");
        }
      });
    };

    editorClass.on("selectionUpdate", ({ editor }) => {
      updateActiveClasses(editor);
    });

    const capitalise = (str: string) =>
      str.charAt(0).toUpperCase() + str.slice(1);

    const edit = (command: Extensions) => {
      const defaultChain = editorClass.chain().focus();
      if (command.startsWith("align")) {
        defaultChain
          .setTextAlign(command.replace("align", "").toLowerCase())
          .run();
      } else if (command === "horizontalRule") {
        defaultChain.setHorizontalRule().run();
      } else {
        const toggleCommand = `toggle${capitalise(command)}`;
        if (toggleCommand in defaultChain) {
          // @ts-ignore
          defaultChain[toggleCommand]().run();
        } else {
          // @ts-ignore
          defaultChain[command]().run();
        }
      }

      updateActiveClasses(editorClass);
    };

    menuItems.forEach((item) => {
      item.addEventListener("click", () => {
        edit(item.classList[0] as Extensions);
      });
    });
  </script>

  <style is:global>
    /* Basic editor styles */

    #blog-editor {
      position: relative;
      display: flex;
      flex-direction: column;
      gap: 12px;
      flex: 1;
      width: 100%;

      #menu {
        display: flex;
        gap: 4px;

        top: 0;
        position: sticky;
        z-index: 999;

        background: #fafafa;
        outline: 0.5px solid gray;
        border-radius: 4px;
        padding: 4px;

        button {
          width: 30px;
          height: 30px;
          display: flex;
          align-items: center;
          justify-content: center;
          border: 1px solid #ccc;
          border-radius: 8px;

          &.active {
            border: 1px solid var(--tw-color-primary);
            color: var(--tw-color-primary);
          }
          &:hover {
            border: 1px solid var(--tw-color-primary);
          }
        }
      }

      .tiptap {
        min-height: 250px;
        resize: vertical;
        overflow: auto;

        background: #fafafa;
        padding: 10px 8px;
        border-radius: 4px;
        outline: 0.5px solid gray;

        &:hover {
          outline: 1px solid var(--tw-color-primary);
        }

        &:focus {
          outline: 2px solid var(--tw-color-primary);
        }
      }
    }
  </style>
</div>
